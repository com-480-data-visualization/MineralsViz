{"ast":null,"code":"var _jsxFileName = \"/Users/amaillard/Desktop/Python/viz_test/test44/globe-app/src/Globe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Globe() {\n  _s();\n  const globeRef = useRef(null);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const isDragging = useRef(false);\n  useEffect(() => {\n    const svg = d3.select(globeRef.current);\n    const width = 600;\n    const height = 600;\n\n    // Projection du globe\n    const projection = d3.geoOrthographic().scale(190).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection);\n\n    // Chargement des données du monde\n    d3.json(\"https://unpkg.com/world-atlas@2.0.2/countries-110m.json\").then(data => {\n      const countries = topojson.feature(data, data.objects.countries);\n\n      // Dessiner les pays\n      svg.selectAll(\"path\").data(countries.features).enter().append(\"path\").attr(\"class\", \"country\").attr(\"d\", path).attr(\"fill\", \"white\") // Couleur initiale du pays\n      .on(\"mousedown\", function (event, d) {\n        isDragging.current = true;\n        setSelectedCountry(d);\n        svg.selectAll(\".country\").attr(\"fill\", country => country === d ? \"#ffcc00\" : \"white\");\n      }).attr(\"id\", d => `country-${d.id}`); // Ajouter un ID unique à chaque pays\n\n      svg.on(\"mousemove\", function (event) {\n        if (isDragging.current) {\n          const dx = event.movementX;\n          const dy = event.movementY;\n          const rotate = projection.rotate();\n          const scaleFactor = 0.25;\n          rotate[0] += dx * scaleFactor;\n          rotate[1] -= dy * scaleFactor;\n          projection.rotate(rotate);\n          svg.selectAll(\"path\").attr(\"d\", path);\n        }\n      });\n      svg.on(\"mouseup\", () => {\n        isDragging.current = false;\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Globe\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: globeRef,\n      width: 600,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"img/change.png\",\n        alt: selectedCountry.properties.name,\n        style: {\n          width: '20'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"img/change.png\",\n        alt: selectedCountry.properties.name,\n        style: {\n          width: '20%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedCountry.properties.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Globe, \"k6xnPcIIY+S0/R8eFNbybg9V9ss=\");\n_c = Globe;\nexport default Globe;\nvar _c;\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","topojson","jsxDEV","_jsxDEV","Globe","_s","globeRef","selectedCountry","setSelectedCountry","isDragging","svg","select","current","width","height","projection","geoOrthographic","scale","translate","path","geoPath","json","then","data","countries","feature","objects","selectAll","features","enter","append","attr","on","event","d","country","id","dx","movementX","dy","movementY","rotate","scaleFactor","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","properties","name","style","_c","$RefreshReg$"],"sources":["/Users/amaillard/Desktop/Python/viz_test/test44/globe-app/src/Globe.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport './styles.css';\n\nfunction Globe() {\n  const globeRef = useRef(null);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const isDragging = useRef(false);\n\n  useEffect(() => {\n    const svg = d3.select(globeRef.current);\n\n    const width = 600;\n    const height = 600;\n\n    // Projection du globe\n    const projection = d3.geoOrthographic()\n      .scale(190)\n      .translate([width / 2, height / 2]);\n\n    const path = d3.geoPath().projection(projection);\n\n    // Chargement des données du monde\n    d3.json(\"https://unpkg.com/world-atlas@2.0.2/countries-110m.json\").then(data => {\n      const countries = topojson.feature(data, data.objects.countries);\n\n      // Dessiner les pays\n      svg.selectAll(\"path\")\n        .data(countries.features)\n        .enter().append(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"fill\", \"white\")  // Couleur initiale du pays\n        .on(\"mousedown\", function(event, d) {\n          isDragging.current = true;\n          setSelectedCountry(d);\n          svg.selectAll(\".country\").attr(\"fill\", country => (country === d ? \"#ffcc00\" : \"white\"));\n        })\n        .attr(\"id\", d => `country-${d.id}`); // Ajouter un ID unique à chaque pays\n\n      svg.on(\"mousemove\", function(event) {\n        if (isDragging.current) {\n          const dx = event.movementX;\n          const dy = event.movementY;\n          const rotate = projection.rotate();\n          const scaleFactor = 0.25;\n\n          rotate[0] += dx * scaleFactor;\n          rotate[1] -= dy * scaleFactor;\n\n          projection.rotate(rotate);\n          svg.selectAll(\"path\").attr(\"d\", path);\n        }\n      });\n\n      svg.on(\"mouseup\", () => {\n        isDragging.current = false;\n      });\n\n    });\n\n  }, []);\n\n  return (\n    <div className=\"Globe\">\n      <svg ref={globeRef} width={600} height={600}></svg>\n      {selectedCountry && (\n        <div className=\"popup\">\n          <img src=\"img/change.png\" alt={selectedCountry.properties.name} style={{ width: '20' }}/>\n          <img src=\"img/change.png\" alt={selectedCountry.properties.name} style={{ width: '20%' }}/>\n          <p>{selectedCountry.properties.name}</p>\n        </div>\n    \n      )}\n    </div>\n  );\n}\n\nexport default Globe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}